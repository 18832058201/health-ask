<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hebeu.ask.dao.JobMapper" >
  <resultMap id="BaseResultMap" type="com.hebeu.ask.model.po.Job" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="queue" property="queue" jdbcType="VARCHAR" />
    <result column="attempts" property="attempts" jdbcType="TINYINT" />
    <result column="reserved" property="reserved" jdbcType="TINYINT" />
    <result column="reserved_at" property="reservedAt" jdbcType="INTEGER" />
    <result column="available_at" property="availableAt" jdbcType="INTEGER" />
    <result column="created_at" property="createdAt" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.hebeu.ask.model.po.Job" extends="BaseResultMap" >
    <result column="payload" property="payload" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, queue, attempts, reserved, reserved_at, available_at, created_at
  </sql>
  <sql id="Blob_Column_List" >
    payload
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.hebeu.ask.model.po.JobExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ask_jobs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hebeu.ask.model.po.JobExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ask_jobs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ask_jobs
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from ask_jobs
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.hebeu.ask.model.po.JobExample" >
    delete from ask_jobs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hebeu.ask.model.po.Job" >
    insert into ask_jobs (id, queue, attempts, 
      reserved, reserved_at, available_at, 
      created_at, payload)
    values (#{id,jdbcType=BIGINT}, #{queue,jdbcType=VARCHAR}, #{attempts,jdbcType=TINYINT}, 
      #{reserved,jdbcType=TINYINT}, #{reservedAt,jdbcType=INTEGER}, #{availableAt,jdbcType=INTEGER}, 
      #{createdAt,jdbcType=INTEGER}, #{payload,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hebeu.ask.model.po.Job" >
    insert into ask_jobs
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="queue != null" >
        queue,
      </if>
      <if test="attempts != null" >
        attempts,
      </if>
      <if test="reserved != null" >
        reserved,
      </if>
      <if test="reservedAt != null" >
        reserved_at,
      </if>
      <if test="availableAt != null" >
        available_at,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="payload != null" >
        payload,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="queue != null" >
        #{queue,jdbcType=VARCHAR},
      </if>
      <if test="attempts != null" >
        #{attempts,jdbcType=TINYINT},
      </if>
      <if test="reserved != null" >
        #{reserved,jdbcType=TINYINT},
      </if>
      <if test="reservedAt != null" >
        #{reservedAt,jdbcType=INTEGER},
      </if>
      <if test="availableAt != null" >
        #{availableAt,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=INTEGER},
      </if>
      <if test="payload != null" >
        #{payload,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hebeu.ask.model.po.JobExample" resultType="java.lang.Integer" >
    select count(*) from ask_jobs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ask_jobs
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.queue != null" >
        queue = #{record.queue,jdbcType=VARCHAR},
      </if>
      <if test="record.attempts != null" >
        attempts = #{record.attempts,jdbcType=TINYINT},
      </if>
      <if test="record.reserved != null" >
        reserved = #{record.reserved,jdbcType=TINYINT},
      </if>
      <if test="record.reservedAt != null" >
        reserved_at = #{record.reservedAt,jdbcType=INTEGER},
      </if>
      <if test="record.availableAt != null" >
        available_at = #{record.availableAt,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null" >
        created_at = #{record.createdAt,jdbcType=INTEGER},
      </if>
      <if test="record.payload != null" >
        payload = #{record.payload,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update ask_jobs
    set id = #{record.id,jdbcType=BIGINT},
      queue = #{record.queue,jdbcType=VARCHAR},
      attempts = #{record.attempts,jdbcType=TINYINT},
      reserved = #{record.reserved,jdbcType=TINYINT},
      reserved_at = #{record.reservedAt,jdbcType=INTEGER},
      available_at = #{record.availableAt,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=INTEGER},
      payload = #{record.payload,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ask_jobs
    set id = #{record.id,jdbcType=BIGINT},
      queue = #{record.queue,jdbcType=VARCHAR},
      attempts = #{record.attempts,jdbcType=TINYINT},
      reserved = #{record.reserved,jdbcType=TINYINT},
      reserved_at = #{record.reservedAt,jdbcType=INTEGER},
      available_at = #{record.availableAt,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hebeu.ask.model.po.Job" >
    update ask_jobs
    <set >
      <if test="queue != null" >
        queue = #{queue,jdbcType=VARCHAR},
      </if>
      <if test="attempts != null" >
        attempts = #{attempts,jdbcType=TINYINT},
      </if>
      <if test="reserved != null" >
        reserved = #{reserved,jdbcType=TINYINT},
      </if>
      <if test="reservedAt != null" >
        reserved_at = #{reservedAt,jdbcType=INTEGER},
      </if>
      <if test="availableAt != null" >
        available_at = #{availableAt,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=INTEGER},
      </if>
      <if test="payload != null" >
        payload = #{payload,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hebeu.ask.model.po.Job" >
    update ask_jobs
    set queue = #{queue,jdbcType=VARCHAR},
      attempts = #{attempts,jdbcType=TINYINT},
      reserved = #{reserved,jdbcType=TINYINT},
      reserved_at = #{reservedAt,jdbcType=INTEGER},
      available_at = #{availableAt,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=INTEGER},
      payload = #{payload,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hebeu.ask.model.po.Job" >
    update ask_jobs
    set queue = #{queue,jdbcType=VARCHAR},
      attempts = #{attempts,jdbcType=TINYINT},
      reserved = #{reserved,jdbcType=TINYINT},
      reserved_at = #{reservedAt,jdbcType=INTEGER},
      available_at = #{availableAt,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>